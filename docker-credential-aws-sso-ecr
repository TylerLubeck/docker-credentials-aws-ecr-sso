#!/usr/bin/env bash
set -o nounset

# This script should only ever be needed for getting new secrets so that's all we'll implement
if [[ $1 != get ]]; then
    echo >&2 "Dunno how to do the requested operation: '$1'"
    exit 1
fi

# The server url we're authenticating to is provided on stdin
# It'll look something like 123123.dkr.ecr.us-east-1.amazonaws.com
# splitting on the dots and 1-indexing, the first field is the account id and the fourth field is the aws region
read -r SERVER_URL
account_id=$(echo "$SERVER_URL" | cut -d. -f1)
region=$(echo "$SERVER_URL" | cut -d. -f4)



# The idea here is that we know the account id from the URL the docker daemon gave us. 
# Problem is, the awscli uses the profile name to lookup configs, and everyone can use whatever profile name they
# want so we can't hard code them.
#
# An aws config file for SSO enabled accounts looks like
#    [profile myprofile]
#    sso_start_url = https://myurl
#    sso_region = myregion
#    sso_account_id = 123123
#
#    [profile myotherprofile]
#    sso_start_url = https://myurl
#    sso_region = myotherregion
#    sso_account_id=456456
#
# From this structure, we can find the account ID and 'look backwards' to find the profile name.
# I don't actually know how to 'look backwards', so instead we capture the name of each profile
# section and only return it if we find a matching account id within that section.

# Begin awk code that you're all going to hate me for
profile_name=$(awk -v expected_account_id="$account_id" '
BEGIN {
    found=0
}
# When we enter a profile block, grab the name of it so we can use it later
/^\[profile .+]$/ {
    profile_name = $0
    gsub(/^\[profile |\]$/, "", profile_name)
}

# When we find the sso_account_id within the profile block, check it against
# the expected account id. If there is a match, we are done and can bail.
/^sso_account_id.*$/ {
    account_id = $0
    gsub(/^sso_account_id = /, "", account_id)

    if (account_id == expected_account_id) {
        found++
        exit
    }
}
# If we found a match, print it. Otherwise exit with a failure.
END {
    if (found>0) {
        print profile_name
    } else {
        exit 1
    }
}' "${AWS_CONFIG_FILE:-$HOME/.aws/config}")
success=$?

if [[ $success != 0 ]]; then
    echo >&2 "Failed to get profile name from ${AWS_CONFIG_FILE:-$HOME/.aws/config} for account $account_id"
    exit 1
fi

# Now that we know how to ask awscli for the secret, do so
SECRET=$(aws --profile "$profile_name" ecr get-login-password --region "$region")

# And now that we have the secret, output the data in the format docker expects
echo "{\"ServerURL\": \"$SERVER_URL\", \"Username\": \"AWS\", \"Secret\": \"$SECRET\"}"

